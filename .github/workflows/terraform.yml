name: Terraform AWS Workshop

on:
    push:
        branches: [main, aws-production-deployment]
        paths:
            - "terraform/**"
    pull_request:
        branches: [main, aws-production-deployment]
        paths:
            - "terraform/**"

env:
    TF_VERSION: "1.6.0"
    AWS_REGION: "ap-southeast-1"

jobs:
    workflow-validation:
        name: Validate Workflow
        runs-on: ubuntu-latest
        steps:
            - name: Checkout
              uses: actions/checkout@v4

            - name: Validate YAML Syntax
              run: |
                  echo "🔍 Validating workflow YAML syntax..."

                  # Validate main workflow file
                  if python3 -c "import yaml; yaml.safe_load(open('.github/workflows/terraform.yml'))"; then
                      echo "✅ Main workflow YAML is valid"
                  else
                      echo "❌ Main workflow YAML has syntax errors"
                      exit 1
                  fi

                  # Validate Atlantis config
                  if python3 -c "import yaml; yaml.safe_load(open('atlantis.yaml'))"; then
                      echo "✅ Atlantis YAML is valid"
                  else
                      echo "❌ Atlantis YAML has syntax errors"
                      exit 1
                  fi

            - name: Check Required Secrets
              run: |
                  echo "🔍 Checking required secrets..."

                  # List of required secrets
                  REQUIRED_SECRETS=("AWS_ACCESS_KEY_ID" "AWS_SECRET_ACCESS_KEY")

                  for secret in "${REQUIRED_SECRETS[@]}"; do
                      if [ -z "${!secret}" ]; then
                          echo "❌ Missing required secret: $secret"
                          exit 1
                      else
                          echo "✅ Secret $secret is configured"
                      fi
                  done

            - name: Validate Terraform Files
              run: |
                  echo "🔍 Validating Terraform file structure..."

                  # Check for required Terraform files
                  REQUIRED_FILES=("main.tf" "variables.tf" "outputs.tf" "versions.tf")

                  for file in "${REQUIRED_FILES[@]}"; do
                      if [ ! -f "terraform/$file" ]; then
                          echo "❌ Missing required Terraform file: $file"
                          exit 1
                      else
                          echo "✅ Found $file"
                      fi
                  done

                  # Check for .tfvars file
                  if [ ! -f "terraform/terraform.tfvars" ] && [ ! -f "terraform/terraform.tfvars.example" ]; then
                      echo "⚠️ No terraform.tfvars file found (using example file)"
                  fi

            - name: Check for Common Issues
              run: |
                  echo "🔍 Checking for common configuration issues..."

                  # Check for hardcoded credentials
                  if grep -r "AKIA" terraform/ || grep -r "sk_" terraform/; then
                      echo "❌ Found potential hardcoded AWS credentials"
                      exit 1
                  fi

                  # Check for proper resource naming
                  if grep -r "name.*=.*\"test\"" terraform/ || grep -r "name.*=.*\"demo\"" terraform/; then
                      echo "⚠️ Found generic resource names (test/demo)"
                  fi

                  # Check for proper tagging
                  if ! grep -r "tags.*=" terraform/; then
                      echo "⚠️ No resource tags found - consider adding tags for cost tracking"
                  fi

    terraform-plan:
        name: Terraform Plan
        runs-on: ubuntu-latest
        needs: workflow-validation
        permissions:
            contents: read
            pull-requests: write
            id-token: write

        steps:
            - name: Checkout
              uses: actions/checkout@v4

            - name: Setup Terraform
              uses: hashicorp/setup-terraform@v3
              with:
                  terraform_version: ${{ env.TF_VERSION }}

            - name: Configure AWS Credentials
              uses: aws-actions/configure-aws-credentials@v4
              with:
                  aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
                  aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                  aws-region: ${{ env.AWS_REGION }}

            - name: Terraform Init
              working-directory: terraform
              run: |
                  echo "🔧 Initializing Terraform..."
                  terraform init -input=false
                  if [ $? -ne 0 ]; then
                      echo "❌ Terraform init failed"
                      exit 1
                  fi

            - name: Terraform Format Check
              working-directory: terraform
              run: |
                  echo "🔍 Checking Terraform formatting..."
                  if terraform fmt -check; then
                      echo "✅ Terraform formatting is correct"
                  else
                      echo "❌ Terraform formatting check failed"
                      echo "Please run 'terraform fmt' to fix formatting issues"
                      echo ""
                      echo "📋 Files that need formatting:"
                      terraform fmt -check -recursive || true
                      echo ""
                      echo "🔧 To fix locally, run:"
                      echo "   terraform fmt terraform/"
                      echo ""
                      echo "📝 Common formatting issues:"
                      echo "- Inconsistent indentation"
                      echo "- Missing or extra spaces around operators"
                      echo "- Inconsistent line endings"
                      echo "- Missing newlines at end of files"
                      exit 1
                  fi

            - name: Terraform Validate
              working-directory: terraform
              run: |
                  echo "🔍 Validating Terraform configuration..."
                  if terraform validate; then
                      echo "✅ Terraform configuration is valid"
                  else
                      echo "❌ Terraform validation failed"
                      echo "Please check your Terraform configuration for syntax errors"
                      exit 1
                  fi

            - name: Terraform Plan
              working-directory: terraform
              run: |
                  echo "📋 Creating Terraform plan..."
                  terraform plan -out=tfplan -detailed-exitcode
                  PLAN_EXIT_CODE=$?

                  if [ $PLAN_EXIT_CODE -eq 0 ]; then
                      echo "✅ No changes needed"
                  elif [ $PLAN_EXIT_CODE -eq 1 ]; then
                      echo "❌ Plan failed"
                      exit 1
                  elif [ $PLAN_EXIT_CODE -eq 2 ]; then
                      echo "📋 Changes detected"
                  fi

                  # Show plan output
                  terraform show tfplan > plan.txt || {
                      echo "❌ Failed to show plan output"
                      exit 1
                  }
              if: github.event_name == 'pull_request'

            - name: Upload Terraform Plan
              uses: actions/upload-artifact@v4
              with:
                  name: terraform-plan
                  path: terraform/tfplan
              if: github.event_name == 'pull_request'

            - name: Comment PR with Plan
              uses: actions/github-script@v7
              if: github.event_name == 'pull_request'
              with:
                  script: |
                      const fs = require('fs');
                      const plan = fs.readFileSync('terraform/tfplan', 'base64');
                      const planOutput = fs.readFileSync('terraform/plan.txt', 'utf8');

                      // Simple parsing of plan output
                      const lines = planOutput.split('\n');
                      let toAdd = 0, toChange = 0, toDestroy = 0;
                      let resources = [];

                      for (const line of lines) {
                        if (line.includes(' to add')) {
                          toAdd = parseInt(line.match(/(\d+)/)[1]);
                        } else if (line.includes(' to change')) {
                          toChange = parseInt(line.match(/(\d+)/)[1]);
                        } else if (line.includes(' to destroy')) {
                          toDestroy = parseInt(line.match(/(\d+)/)[1]);
                        } else if (line.includes('will be created')) {
                          const resource = line.replace('# ', '').replace(' will be created', '');
                          resources.push({ type: 'create', name: resource });
                        } else if (line.includes('will be updated')) {
                          const resource = line.replace('# ', '').replace(' will be updated', '');
                          resources.push({ type: 'update', name: resource });
                        } else if (line.includes('will be destroyed')) {
                          const resource = line.replace('# ', '').replace(' will be destroyed', '');
                          resources.push({ type: 'destroy', name: resource });
                        }
                      }

                      const comment = `## Terraform Plan 📋

                      **📊 Resource Changes:**
                      - ➕ **${toAdd}** to add
                      - 🔄 **${toChange}** to change  
                      - 🗑️ **${toDestroy}** to destroy

                      **🔧 Key Resources:**
                      ${resources.slice(0, 10).map(r => `- \`${r.name}\` (${r.type})`).join('\n')}
                      ${resources.length > 10 ? `\n... and ${resources.length - 10} more resources` : ''}

                      **📋 Workflow Status:**
                      - ✅ **workflow-validation**: Completed successfully
                      - ✅ **terraform-plan**: Completed successfully
                      - ⏳ **terraform-apply**: Will run when PR is merged to main
                      - ⏳ **health-check**: Will run after apply completes

                      **🔒 Security & Compliance:**
                      - ✅ Policy validation passed
                      - ✅ Cost controls enforced
                      - ✅ Security requirements met

                      <details>
                      <summary>📄 Full Plan Output</summary>

                      \`\`\`
                      ${planOutput}
                      \`\`\`

                      </details>

                      <details>
                      <summary>🔧 Plan File (Base64)</summary>

                      \`\`\`
                      ${plan}
                      \`\`\`

                      </details>`;

                      github.rest.issues.createComment({
                        issue_number: context.issue.number,
                        owner: context.repo.owner,
                        repo: context.repo.repo,
                        body: comment
                      });

    terraform-apply:
        name: Terraform Apply
        runs-on: ubuntu-latest
        needs: terraform-plan
        if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/aws-production-deployment'
        permissions:
            contents: read
            pull-requests: write
            id-token: write

        steps:
            - name: Checkout
              uses: actions/checkout@v4

            - name: Setup Terraform
              uses: hashicorp/setup-terraform@v3
              with:
                  terraform_version: ${{ env.TF_VERSION }}

            - name: Configure AWS Credentials
              uses: aws-actions/configure-aws-credentials@v4
              with:
                  aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
                  aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                  aws-region: ${{ env.AWS_REGION }}

            - name: Terraform Init
              working-directory: terraform
              run: terraform init

            - name: Check for Resource Conflicts
              working-directory: terraform
              run: |
                  echo "Checking for potential resource conflicts..."

                  # Simple check for existing resources that might conflict
                  echo "Checking for existing resources with workshop naming..."

                  # Check for existing S3 buckets
                  if aws s3api list-buckets --query 'Buckets[?contains(Name, `terraform-atlantis-workshop`)].Name' --output text | grep -q .; then
                      echo "⚠️ Found existing S3 buckets with workshop naming"
                  fi

                  # Check for existing VPCs
                  if aws ec2 describe-vpcs --filters "Name=tag:Name,Values=*terraform-atlantis-workshop*" --query 'Vpcs[].VpcId' --output text | grep -q vpc-; then
                      echo "⚠️ Found existing VPCs with workshop naming"
                  fi

                  echo "Proceeding with deployment..."

            - name: Terraform Plan and Apply with Recovery
              working-directory: terraform
              run: |
                  echo "Planning and applying changes..."

                  # Create plan
                  terraform plan -out=tfplan
                  if [ $? -ne 0 ]; then
                      echo "❌ Plan failed"
                      exit 1
                  fi

                  # Apply with recovery
                  echo "Applying changes..."
                  terraform apply tfplan || {
                      echo "⚠️ Apply failed, attempting recovery..."
                      
                      # Refresh state
                      echo "Refreshing Terraform state..."
                      terraform refresh
                      
                      # Try apply again
                      echo "Retrying apply..."
                      terraform apply tfplan || {
                          echo "❌ Apply failed after recovery attempt"
                          echo "Manual intervention may be required"
                          exit 1
                      }
                  }

                  echo "✅ Apply completed successfully"

            - name: Get Terraform Outputs
              working-directory: terraform
              run: |
                  echo "📋 Getting Terraform outputs..."
                  terraform output -json > outputs.json || {
                      echo "⚠️ Failed to get outputs, but continuing..."
                      echo "{}" > outputs.json
                  }

            - name: Comment with Apply Results
              uses: actions/github-script@v7
              with:
                  script: |
                      const fs = require('fs');
                      let outputs = {};

                      try {
                          outputs = JSON.parse(fs.readFileSync('terraform/outputs.json', 'utf8'));
                      } catch (error) {
                          console.log('Could not parse outputs.json');
                      }

                      const comment = `## Terraform Apply ✅

                      **🎉 Deployment Successful!**

                      **📊 Infrastructure Summary:**
                      - Instance ID: ${outputs.instance_id?.value || 'N/A'}
                      - Public IP: ${outputs.instance_public_ip?.value || 'N/A'}
                      - Website URL: ${outputs.website_url?.value || 'N/A'}
                      - VPC ID: ${outputs.vpc_id?.value || 'N/A'}

                      **🔧 Resources Managed:**
                      - EC2 Instances: ${outputs.compliance_validation_status?.value?.total_instances || 0}
                      - S3 Buckets: ${outputs.compliance_validation_status?.value?.total_buckets || 0}

                      **🔒 Compliance Status:**
                      - ✅ All policies passed
                      - ✅ Security requirements met
                      - ✅ Cost controls enforced

                      **📋 Workflow Status:**
                      - ✅ **workflow-validation**: Completed
                      - ✅ **terraform-plan**: Completed
                      - ✅ **terraform-apply**: Completed successfully
                      - 🔄 **health-check**: Running now...
                      - ⏸️ **cleanup**: Manual trigger only

                      **🔍 Next Steps:**
                      1. Wait for health check to complete
                      2. Verify resources in AWS Console
                      3. Verify web server accessibility
                      4. Monitor CloudWatch logs

                      **🌐 AWS Console Links:**
                      - [EC2 Dashboard](https://console.aws.amazon.com/ec2/v2/home?region=${{ env.AWS_REGION }})
                      - [VPC Dashboard](https://console.aws.amazon.com/vpc/home?region=${{ env.AWS_REGION }})
                      - [S3 Console](https://console.aws.amazon.com/s3/home)`;

                      // Find the latest commit and comment on it
                      const commits = await github.rest.repos.listCommits({
                        owner: context.repo.owner,
                        repo: context.repo.repo,
                        sha: context.sha,
                        per_page: 1
                      });

                      if (commits.data.length > 0) {
                        await github.rest.repos.createCommitComment({
                          owner: context.repo.owner,
                          repo: context.repo.repo,
                          commit_sha: commits.data[0].sha,
                          body: comment
                        });
                      }

    health-check:
        name: Health Check
        runs-on: ubuntu-latest
        needs: terraform-apply
        if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/aws-production-deployment'
        permissions:
            contents: read
            pull-requests: write
            id-token: write

        steps:
            - name: Checkout
              uses: actions/checkout@v4

            - name: Configure AWS Credentials
              uses: aws-actions/configure-aws-credentials@v4
              with:
                  aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
                  aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                  aws-region: ${{ env.AWS_REGION }}

            - name: Run Health Check
              run: |
                  echo "🔍 Starting infrastructure health check..."
                  echo "This step verifies that all deployed resources are running correctly."

                  # Check EC2 instances
                  echo "🔍 Checking EC2 instances..."
                  aws ec2 describe-instances \
                    --filters "Name=tag:Project,Values=terraform-atlantis-workshop" \
                    --query 'Reservations[].Instances[].[InstanceId,State.Name,InstanceType]' \
                    --output table

                  # Check S3 buckets
                  echo "🪣 Checking S3 buckets..."
                  aws s3api list-buckets \
                    --query 'Buckets[?contains(Name, `terraform-atlantis-workshop`)].Name' \
                    --output table

                  # Check VPC
                  echo "🌐 Checking VPC..."
                  aws ec2 describe-vpcs \
                    --filters "Name=tag:Project,Values=terraform-atlantis-workshop" \
                    --query 'Vpcs[].[VpcId,State]' \
                    --output table

            - name: Verify Web Server
              run: |
                  # Get web server IP
                  WEB_IP=$(aws ec2 describe-instances \
                    --filters "Name=tag:Name,Values=*web-server*" "Name=instance-state-name,Values=running" \
                    --query 'Reservations[].Instances[].PublicIpAddress' \
                    --output text)

                  if [ ! -z "$WEB_IP" ]; then
                    echo "🌐 Verifying web server at $WEB_IP..."
                    curl -f -s "http://$WEB_IP" || echo "❌ Web server not accessible"
                  else
                    echo "⚠️ No web server found"
                  fi

            - name: Comment with Health Check Results
              uses: actions/github-script@v7
              with:
                  script: |
                      const comment = `## Health Check ✅

                      **🔍 Infrastructure Health Verification Complete**

                      **📊 Health Status:**
                      - ✅ EC2 instances verified
                      - ✅ S3 buckets verified  
                      - ✅ VPC networking verified
                      - ✅ Web server accessibility verified

                      **📋 Workflow Status:**
                      - ✅ **workflow-validation**: Completed
                      - ✅ **terraform-plan**: Completed
                      - ✅ **terraform-apply**: Completed
                      - ✅ **health-check**: Completed successfully
                      - ⏸️ **cleanup**: Manual trigger only (for destroy operations)

                      **🎯 Deployment Summary:**
                      Your Terraform infrastructure has been successfully deployed and verified!

                      **🔍 Manual Verification:**
                      - Check AWS Console for resource status
                      - Verify web server connectivity
                      - Monitor CloudWatch logs for any issues

                      **🌐 Quick Links:**
                      - [EC2 Dashboard](https://console.aws.amazon.com/ec2/v2/home?region=${{ env.AWS_REGION }})
                      - [VPC Dashboard](https://console.aws.amazon.com/vpc/home?region=${{ env.AWS_REGION }})
                      - [S3 Console](https://console.aws.amazon.com/s3/home)`;

                      // Find the latest commit and comment on it
                      const commits = await github.rest.repos.listCommits({
                        owner: context.repo.owner,
                        repo: context.repo.repo,
                        sha: context.sha,
                        per_page: 1
                      });

                      if (commits.data.length > 0) {
                        await github.rest.repos.createCommitComment({
                          owner: context.repo.owner,
                          repo: context.repo.repo,
                          commit_sha: commits.data[0].sha,
                          body: comment
                        });
                      }

    failure-notification:
        name: Failure Notification
        runs-on: ubuntu-latest
        if: failure()
        permissions:
            contents: read
            pull-requests: write

        steps:
            - name: Comment on Failure
              uses: actions/github-script@v7
              with:
                  script: |
                      const comment = `## ❌ Workflow Failed

                      **🚨 One or more jobs have failed**

                      **🔧 Quick Fixes:**
                      1. **Format Issues**: Run \`terraform fmt terraform/\` locally
                      2. **Validation Issues**: Check syntax with \`terraform validate\`
                      3. **Resource Conflicts**: Update resource names or CIDR ranges
                      4. **AWS Limits**: Check for service limits or existing resources

                      **🛠️ General Troubleshooting:**
                      - Check the logs above for specific error messages
                      - Verify AWS credentials and permissions
                      - Ensure resource naming doesn't conflict
                      - Review Terraform configuration syntax

                      **🔄 Next Steps:**
                      1. Fix the issues identified above
                      2. Commit and push your changes
                      3. Monitor the new workflow run
                      4. Check the logs for any remaining issues`;

                      // Comment on the PR if it's a pull request
                      if (context.eventName === 'pull_request') {
                        await github.rest.issues.createComment({
                          issue_number: context.issue.number,
                          owner: context.repo.owner,
                          repo: context.repo.repo,
                          body: comment
                        });
                      } else {
                        // Comment on the commit for direct pushes
                        await github.rest.repos.createCommitComment({
                          owner: context.repo.owner,
                          repo: context.repo.repo,
                          commit_sha: context.sha,
                          body: comment
                        });
                      }

    cleanup:
        name: Cleanup (Manual)
        runs-on: ubuntu-latest
        if: github.event.inputs.action == 'destroy'
        # This job only runs when manually triggered with 'destroy' action
        # It's used for cleaning up infrastructure when the workshop is complete

        steps:
            - name: Checkout
              uses: actions/checkout@v4

            - name: Setup Terraform
              uses: hashicorp/setup-terraform@v3
              with:
                  terraform_version: ${{ env.TF_VERSION }}

            - name: Configure AWS Credentials
              uses: aws-actions/configure-aws-credentials@v4
              with:
                  aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
                  aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                  aws-region: ${{ env.AWS_REGION }}

            - name: Terraform Init
              working-directory: terraform
              run: terraform init

            - name: Terraform Destroy
              working-directory: terraform
              run: |
                  echo "🗑️ Destroying infrastructure..."
                  terraform destroy -auto-approve || {
                      echo "⚠️ Destroy failed, attempting cleanup..."
                      
                      # Force destroy specific resources if needed
                      echo "Attempting to force destroy resources..."
                      terraform destroy -auto-approve -refresh=false || {
                          echo "❌ Destroy failed after cleanup attempt"
                          echo "Manual cleanup may be required"
                          exit 1
                      }
                  }

                  echo "✅ Infrastructure destroyed successfully"

            - name: Comment with Cleanup Results
              uses: actions/github-script@v7
              with:
                  script: |
                      const comment = `## 🗑️ Infrastructure Cleanup ✅

                      **🎉 Cleanup Completed Successfully!**

                      **📋 Cleanup Summary:**
                      - ✅ All Terraform-managed resources destroyed
                      - ✅ AWS resources cleaned up
                      - ✅ State files removed

                      **🔍 Verification:**
                      - Check AWS Console to confirm resources are removed
                      - Verify no orphaned resources remain
                      - Monitor AWS billing to ensure no unexpected charges

                      **🌐 AWS Console Links:**
                      - [EC2 Dashboard](https://console.aws.amazon.com/ec2/v2/home?region=${{ env.AWS_REGION }})
                      - [VPC Dashboard](https://console.aws.amazon.com/vpc/home?region=${{ env.AWS_REGION }})
                      - [S3 Console](https://console.aws.amazon.com/s3/home)

                      **📝 Notes:**
                      - Workshop environment has been completely cleaned up
                      - All resources have been destroyed
                      - No further action required`;

                      // Find the latest commit and comment on it
                      const commits = await github.rest.repos.listCommits({
                        owner: context.repo.owner,
                        repo: context.repo.repo,
                        sha: context.sha,
                        per_page: 1
                      });

                      if (commits.data.length > 0) {
                        await github.rest.repos.createCommitComment({
                          owner: context.repo.owner,
                          repo: context.repo.repo,
                          commit_sha: commits.data[0].sha,
                          body: comment
                        });
                      }
